import type { NextPage, GetStaticProps } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";
import { getComics } from "dh-marvel/services/marvel/marvel.service";
import BodySingle from "dh-marvel/components/layouts/body/single/body-single";
import ComicGrid from "dh-marvel/components/comic/comicGrid";
import Pagination from 'dh-marvel/components/comic/pagination';

type Props = {
  initialComics: any[];
};

const Index: NextPage<Props> = ({ initialComics }) => {
 const [comics, setComics] = useState(initialComics);
 const [currentPage, setCurrentPage] = useState(1);

 useEffect(() => {
  const fetchComics = async () => {
    try {
      const data = await getComics(currentPage);
      if (data && data.data && data.data.results) {
        setComics(data.data.results);
        console.log(data.data.results);
      } else {
        console.error('No se pudieron obtener los cómics');
      }
    } catch (error) {
      console.error('Ocurrió un error al obtener los cómics', error);
    }
  };

  fetchComics();
}, [currentPage]);

 return (
  <>
   <Head>
    <title>Create Next App</title>
    <meta name="description" content="Generated by create next app" />
    <link rel="icon" href="/favicon.ico" />
   </Head>

   <BodySingle title={"Sample"}>
        <ComicGrid comics={comics} />
        <Pagination onPageChange={setCurrentPage} />
      </BodySingle>
  </>
 );
};

export const getStaticProps: GetStaticProps = async () => {
  const initialComics = await getComics(1);
  return {
    props: {
      initialComics,
    },
    revalidate: 60, // Re-generate the page every minute
  };
};

export default Index;